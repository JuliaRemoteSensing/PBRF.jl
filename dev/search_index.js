var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PolarizedBRF","category":"page"},{"location":"#PolarizedBRF.jl","page":"Home","title":"PolarizedBRF.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PolarizedBRF.jl is a Julia package for calculating polarized bidrectional reflectance factors. It is largely based on M. Mishchenko et al.'s code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PolarizedBRF, PolarizedBRF.Wrapper]","category":"page"},{"location":"#PolarizedBRF.F_from_expansion-Tuple{Any, Any}","page":"Home","title":"PolarizedBRF.F_from_expansion","text":"Calculate scattering matrix for given angles using the expansion coefficients.\n\nF_from_expansion(coeff, θ; output_dataframe, data)\n\n\ncoeff: Expansion coefficients, which is an lmax1 x 6 matrix.\nθ: The angles in ascending order at which the scattering matrix is calculated.\n\nOptional parameters:\n\noutput_dataframe: Whether or not to output the scattering matrix in the DataFrame format. Default is false, and an Nθ x 6 matrix will be outputed.\ndata: Use precalculated Wigner d data. By default new data will be calculated.\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.evaluate-NTuple{5, Any}","page":"Home","title":"PolarizedBRF.evaluate","text":"Evaluate the refletion matrix mathbfR(muphimu_0phi_0) using built interpolations.\n\nevaluate(itps, μ, ϕ, μ₀, ϕ₀)\n\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.expand-Tuple{Any, Any}","page":"Home","title":"PolarizedBRF.expand","text":"Expand given scattering matrix (6-independent columns: a1, a2, a3, a4, b1, b2) to General Spherical Function (GSF) coefficients.\n\nexpand(\n    F,\n    θ₀;\n    smax,\n    smin,\n    ngauss,\n    double_threshold,\n    adding_step,\n    stop_threshold,\n    cutoff,\n    interpolation_strategy,\n    ε,\n    θₑ,\n    error_type,\n    _kwargs...\n)\n\n\nF: The scattering matrix columns, which should be an Nθ x 6 matrix.\nθ₀: The scattering angles. If the maximum value is larger than π, then the angles are assumed to be in degrees, otherwise the angles are assumed to be in radians.\n\nOptional parameters:\n\nsmax: Highest level for expansion. Default is -1, and in such case, the highest level is determined via trial-and-error until the desired precision (defined by ε and error_type) is reached.\nsmin: The start point of iteration. Default is 30.\nngauss: The function for determine the number of Gaussian quadrature points. It takes the current expansion level plus 1, s + 1, as the input. Default is identity.\ndouble_threshold: The highest level before which s is doubled each time. Default is 5000.\nadding_step: The step size in the adding phase. Default is 100.\nstop_threshold: The highest permitted expansion level. Default is 20000.\ninterpolation_strategy: The interpolation strategy. Default is PolarizedBRF.Linear, which uses LinearInterpolation from Interpolations.jl. Optional is PolarizedBRF.Spline, which uses Spline1D from Dierckx.jl.\ncutoff: Cut off the expansion coefficients when the absolute value of α₁ at this level is smaller than cutoff. Default is 0.0, meaning no cutoff will be applied. Note that Ito et al. (2018) used cutoff = 1e-8.\nε: The desired error bound. Default is 0.02.\nθₑ: The angles used for error checking. Default is θ₀.\nerror_type: The error type. Default is PolarizedBRF.AbsoluteError, other options include PolarizedBRF.RelativeError and PolarizedBRF.RootMeanSquaredError.\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.get_itp-Tuple{Any, Any}","page":"Home","title":"PolarizedBRF.get_itp","text":"Build interpolations from the calculated Fourier coefficients.\n\nget_itp(x, R)\n\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.ssf-Tuple{Any, Any, Any}","page":"Home","title":"PolarizedBRF.ssf","text":"Calculate the static structure factor.\n\nssf(f, r, θ)\n\n\nf: Volume fraction.\nr: Volumetrically equivalent radius.\nθ: Scattering angle in radians.\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.ssf_correction-Tuple{Any, Any, Any}","page":"Home","title":"PolarizedBRF.ssf_correction","text":"Apply the static structure factor correction to the given expansion coeffcients.\n\nssf_correction(\n    coeff,\n    Cext,\n    Csca;\n    volume_fraction,\n    r,\n    τ,\n    Nθ,\n    Nm,\n    equidistant,\n    output_dataframe,\n    strategy,\n    kwargs...\n)\n\n\ncoeff: The original expansion coeffcients, an (lmax + 1) x 6 matrix.\nCext: Extinction cross section.\nCsca: Scattering cross section.\n\nOptional parameters:\n\nvolume_fraction: The volume fraction taken by the scatterers. Default is 0.2.\nr: The volumetrically equivalent/effective radius of the scatterer.\nτ: The stickiness factor. Default is 0, meaning stickiness is not considered. The valid range is τ ≥ (2 - √2) / 6.\nNθ: Number of angles required for the output scattering matrix. Default is 181.\nNm: Number of angles used for the intermediate step. Default is 2lmax.\nequidistant: Whether or not the output angles should be equidistant. Default is true. When set to false, Gaussian quadrature nodes (for cosθ) will be used instead.\noutput_dataframe: Whether or not to output the scattering matrix in the DataFrame format. Default is false, and an Nθ x 6 matrix will be outputed.\nstrategy: Special strategy for expansion. Default is PolarizedBRF.StandardExpansion, and the expansion can be controlled via the keyword arguments specified for expand(). If use PolarizedBRF.Ito18, then the strategy used in Ito et al. (2018) will be used instead, in which the highest expansion level is set to 4 * lmax and the expansion coefficients are cut off at the threshold 1e-8.  \nAll keyword arguments for expand() also apply here.\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.ssf_hunter-Tuple{Any, Any, Any}","page":"Home","title":"PolarizedBRF.ssf_hunter","text":"Calculate the static structure factor using Hunter (2001)'s formula, which is almost equivalent to ssf(), but does not treat 4rsinfractheta2001 cases specially.\n\nssf_hunter(f, r, θ)\n\nf: Volume fraction.\nr: Volumetrically equivalent radius.\nθ: Scattering angle in radians.\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.ssf_sticky-NTuple{4, Any}","page":"Home","title":"PolarizedBRF.ssf_sticky","text":"Calculate SSF for sticky particles.\n\nssf_sticky(f, r, θ, τ)\n\n\nSee Eqs. (8.4.20–22) in:\n\nTsang, L., Kong, J.A., Ding, K.-H., Ao, C.O., 2001. Scattering of Electromagnetic Waves: Numerical Simulations. John Wiley & Sons, Inc., New York, USA. https://doi.org/10.1002/0471224308\n\nf: Volume fraction.\nr: Volumetrically equivalent radius.\nθ: Scattering angle in radians.\nτ: Stickiness parameter.\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.Wrapper.dd-Tuple{Any, Any, Any}","page":"Home","title":"PolarizedBRF.Wrapper.dd","text":"Calculate d_m0^s(x), d_m-2^s(x) and d_m2^s(x) for sin0l_max.\n\ndd(x, lmax, m)\n\n\n\n\n\n\n","category":"method"},{"location":"#PolarizedBRF.Wrapper.run_pbrf-Tuple{Any, Any, Any}","page":"Home","title":"PolarizedBRF.Wrapper.run_pbrf","text":"Calculate the Fourier coefficients of the refletion matrix using PolarizedBRF.\n\nrun_pbrf(ω, ngauss, coeff; ε, x, w, mode)\n\n\nω is the single scattering albedo, which should be within (0, 1].\nngauss determines the number of points used in integration.\ncoeff is the expansion coefficients, which should be an R x 6 matrix.\n\nOptional parameters:\n\nε is the threshold for convergence check. Detault is 1e-7.\nmode determines the way to do the quadrature. Default is PolarizedBRF.StandardQuadrature (NQUADR=2 in the original code), which is a normal Gaussian-Legendre quadrature within [0, 1]. Other options are PolarizedBRF.NormalOrientedQuadrature (NQUADR=1 in the original code), PolarizedBRF.ExplicitNormalQuadrature (NQUADR=3 in the original code) and PolarizedBRF.CustomQuadrature. Note that:\nPolarizedBRF.StandardQuadrature might not be suitable if the refletion in the normal direction is needed.\nFor PolarizedBRF.CustomQuadrature, you need to input suitable nodes x and weights w yourself.\nx is the custom quadrature nodes within [0, 1]. Only used when mode is PolarizedBRF.CustomQuadrature.\nw is the corresponding quadrature weights. Only used when mode is PolarizedBRF.CustomQuadrature.\n\nResults:\n\nR is a 4 x 4 x NG x NG x LMAX1 array, storing all the Fourier coefficients.\nx is the quadrature nodes.\nw is the quadrature weights.\n\n\n\n\n\n","category":"method"}]
}
